{"version":3,"file":"static/js/996.713691d2.chunk.js","mappings":"sLAIA,MAOMA,EAAW,CACf,qDACA,qDACA,iEACA,6CACA,wDACA,yDAqBIC,EAAYC,IAAsB,IAArB,YAAEC,GAAaD,EAChC,MAGOE,EAAKC,IAAcC,EAAAA,EAAAA,UAAS,IAC5BC,EAASC,IAAiBF,EAAAA,EAAAA,UAASN,EAASI,KAC5CK,EAAMC,IAAcJ,EAAAA,EAAAA,UAAS,IAC7BK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,GA0BzC,MAnDkBO,EAACC,EAAUC,KAC7B,MAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,KACRF,EAAcG,QAAUL,CAAQ,GAC/B,CAACA,KAEJI,EAAAA,EAAAA,YAAU,KACR,GAAIH,EAAO,CACT,MAAMK,EAAKC,aAAY,KACrBL,EAAcG,SAAS,GACtBJ,GACH,MAAO,IAAMO,cAAcF,EAC7B,CACA,MAAO,MAAQ,GACd,CAACL,GAAO,EAYXF,EACE,KACE,IAAIU,EAASnB,EACToB,EAAUf,EACVA,EAZK,IAYUT,EAASI,GAAKqB,SAC/BF,GAAU,EACVC,EAAU,GAERD,IAAWvB,EAASyB,OAClBtB,GACFE,EAAW,GACXK,EAAW,IAEXE,GAAY,IAGdJ,EAAcR,EAASuB,GAAQG,MAAM,EAAGF,IACxCnB,EAAWkB,GACXb,EAAWc,EAAU,GACvB,GAEFb,EA5BY,GA4BO,OAInBgB,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,OAtEgBC,EAsEIvB,EAnEb,mEACDwB,KAAKD,IAAyB,IAAhBA,EAAKL,OAkEM,CAAC,EAAI,CAAEO,MAAO,QAC7CC,aAAcA,IAAMrB,GAAY,GAChCsB,aAAcA,IAAM9B,EAAMJ,EAASyB,QAAUb,GAAY,GAAMuB,UAE/DR,EAAAA,EAAAA,KAAA,KAAGS,KAAK,kCAAiCD,UACvCR,EAAAA,EAAAA,KAAA,QAAAQ,SAAO5B,QA3EOuB,KA6EZ,EAIV7B,EAAUoC,aAAe,CACvBlC,aAAa,GAOf,U,cCtFA,MAsBA,EAtBgBmC,KACdX,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,0EAAyEN,UAErFO,EAAAA,EAAAA,MAAA,WAASd,UAAU,OAAOR,GAAG,UAASe,SAAA,EACpCR,EAAAA,EAAAA,KAAA,UAAAQ,UACER,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOO,UACpBR,EAAAA,EAAAA,KAAA,MAAAQ,UACER,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACC,GAAG,WAAUT,SAAC,mBAI1BO,EAAAA,EAAAA,MAAA,OAAKd,UAAU,WAAUO,SAAA,EACvBR,EAAAA,EAAAA,KAAA,KAAAQ,SAAG,6DACHR,EAAAA,EAAAA,KAAC1B,EAAS,QAEZ0B,EAAAA,EAAAA,KAACkB,EAAAA,EAAY,Q","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n  'thanks-for-stopping-by-now-go-make-something-cool!',\r\n  'appreciate-you-visiting-my-corner-of-the-internet!',\r\n  'hope-you-liked-what-you-saw-if-not-let’s-pretend-you-did!',\r\n  'come-back-soon-or-send-coffee-your-choice!',\r\n  'you-just-browsed-99%-more-than-most-people-do-thanks!',\r\n  'if-you-didn’t-like-it-blame-my-past-self-not-me!',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = ({ loopMessage }) => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(0); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(\r\n    () => {\r\n      let newIdx = idx;\r\n      let newChar = char;\r\n      if (char - hold >= messages[idx].length) {\r\n        newIdx += 1;\r\n        newChar = 0;\r\n      }\r\n      if (newIdx === messages.length) {\r\n        if (loopMessage) {\r\n          updateIter(0);\r\n          updateChar(0);\r\n        } else {\r\n          setIsActive(false);\r\n        }\r\n      } else {\r\n        updateMessage(messages[newIdx].slice(0, newChar));\r\n        updateIter(newIdx);\r\n        updateChar(newChar + 1);\r\n      }\r\n    },\r\n    isActive ? delay : null,\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: 'red' }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => idx < messages.length && setIsActive(true)}\r\n    >\r\n      <a href=\"mailto:nagariyaaarnav@gmail.com\">\r\n        <span>{message}</span>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nEmailLink.defaultProps = {\r\n  loopMessage: false,\r\n};\r\n\r\nEmailLink.propTypes = {\r\n  loopMessage: PropTypes.bool,\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"Contact Aarnav Nagariya via email @ aarnav.nagariya@research.iiit.ac.in\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2>\r\n            <Link to=\"/contact\">Contact</Link>\r\n          </h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <p>Feel free to get in touch by clicking the icons below. </p>\r\n        <EmailLink />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["messages","EmailLink","_ref","loopMessage","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","length","slice","_jsx","className","style","text","test","color","onMouseEnter","onMouseLeave","children","href","defaultProps","Contact","Main","title","description","_jsxs","Link","to","ContactIcons"],"sourceRoot":""}